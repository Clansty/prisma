name: CI

# Run on push only for main, if not it will trigger push & pull_request on PRs at the same time
on:
  push:
    branches:
      - main
    paths-ignore:
      # Any update here needs to be done for
      # - `pull_request` see below
      # - https://github.com/prisma/prisma/blob/main/.buildkite/test/buildkite-entry.sh
      # - https://github.com/prisma/prisma/blob/main/.buildkite/publish/buildkite-entry.sh
      - '*.md'
      - '.devcontainer/**'
      - '.vscode/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docs/**'
      - 'examples/**'
      - 'LICENSE'
      - '.github/CODEOWNERS'
      - 'src/.buildkite/**'
      - '.dockerignore'
      - '*.bench.ts'
      - 'scripts/ci/publish.ts'
      - 'graphs/**'
  pull_request:
    paths-ignore:
      # Any update here needs to be done for
      # - `push`see before
      # - https://github.com/prisma/prisma/blob/main/.buildkite/test/buildkite-entry.sh
      # - https://github.com/prisma/prisma/blob/main/.buildkite/publish/buildkite-entry.sh
      - '*.md'
      - '.devcontainer/**'
      - '.vscode/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docs/**'
      - 'examples/**'
      - 'LICENSE'
      - '.github/CODEOWNERS'
      - 'src/.buildkite/**'
      - '.dockerignore'
      - '*.bench.ts'
      - 'scripts/ci/publish.ts'
      - 'graphs/**'

env:
  HAS_BUILDPULSE_SECRETS: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID != '' && secrets.BUILDPULSE_SECRET_ACCESS_KEY != '' }}
  PRISMA_TELEMETRY_INFORMATION: 'prisma test.yml'
  # To hide "Update available 0.0.0 -> x.x.x"
  PRISMA_HIDE_UPDATE_MESSAGE: true
  CI: true
  SKIP_GIT: true
  GITHUB_CONTEXT: ${{ toJson(github) }}
  TEST_POSTGRES_URI: postgres://prisma:prisma@localhost:5432/tests
  TEST_POSTGRES_ISOLATED_URI: postgres://prisma:prisma@localhost:5435/tests
  TEST_MYSQL_URI: mysql://root:root@localhost:3306/tests
  TEST_MYSQL_ISOLATED_URI: mysql://root:root@localhost:3307/tests
  TEST_MSSQL_URI: mssql://SA:Pr1sm4_Pr1sm4@localhost:1433/master
  TEST_MSSQL_JDBC_URI: sqlserver://localhost:1433;database=master;user=SA;password=Pr1sm4_Pr1sm4;trustServerCertificate=true;
  TEST_MSSQL_JDBC_URI_MIGRATE: 'sqlserver://localhost:1433;database=tests-migrate;user=SA;password=Pr1sm4_Pr1sm4;trustServerCertificate=true;'
  TEST_MONGO_URI: 'mongodb://root:prisma@localhost:27018/tests?authSource=admin'
  TEST_COCKROACH_URI: 'postgresql://prisma@localhost:26257/tests'
  TEST_COCKROACH_URI_MIGRATE: 'postgresql://prisma@localhost:26257/tests-migrate'
  TEST_COCKROACH_SHADOWDB_URI_MIGRATE: 'postgres://prisma:prisma@localhost:26257/tests-migrate-shadowdb'
  TEST_FUNCTIONAL_POSTGRES_URI: 'postgres://prisma:prisma@localhost:5432/PRISMA_DB_NAME'
  TEST_FUNCTIONAL_MYSQL_URI: 'mysql://root:root@localhost:3306/PRISMA_DB_NAME'
  TEST_FUNCTIONAL_MSSQL_URI: 'sqlserver://localhost:1433;database=PRISMA_DB_NAME;user=SA;password=Pr1sm4_Pr1sm4;trustServerCertificate=true;'
  TEST_FUNCTIONAL_MONGO_URI: 'mongodb://root:prisma@localhost:27018/PRISMA_DB_NAME?authSource=admin'
  TEST_FUNCTIONAL_COCKROACH_URI: 'postgresql://prisma@localhost:26257/PRISMA_DB_NAME'
  NODE_OPTIONS: '--max-old-space-size=8096'

jobs:
  detect_jobs_to_run:
    name: Detect jobs to run
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.detect.outputs.jobs }}
    steps:
      - id: checkout
        uses: actions/checkout@v3
      - id: files
        uses: Ana06/get-changed-files@v1.2 # it's a fork of jitterbit/get-changed-files@v1 which works better with pull requests
        with:
          format: 'json'
      - id: detect
        run: ./.github/workflows/scripts/detect-jobs-to-run.js <<<'${{ steps.files.outputs.all }}'

  # From https://github.com/marketplace/actions/skip-duplicate-actions
  # This action cleans up previously running instances of a workflow on the same branch.
  # This accomplishes the task of automatically cancelling CI runs on pushes to the same branch,
  # which is a common feature in most CI systems but currently not possible with GitHub actions.
  cleanup-runs:
    continue-on-error: true
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main' && !contains(github.actor, 'renovate')"
    steps:
      - uses: fkirc/skip-duplicate-actions@v4.0.0

  #
  # Linting
  #
  lint:
    timeout-minutes: 7
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7

      - uses: actions/setup-node@v3
        with:
          cache: 'pnpm'
          node-version: '16'

      # https://github.com/actions/toolkit/blob/master/docs/commands.md#problem-matchers
      # Matchers are added in setup-node
      # https://github.com/actions/setup-node/blob/bacd6b4b3ac3127b28a1e1920c23bf1c2cadbb85/src/main.ts#L54-L60
      - name: Disable GitHub annotations from linting
        run: |
          echo "::remove-matcher owner=eslint-compact::"
          echo "::remove-matcher owner=eslint-stylish::"

      - run: bash .github/workflows/scripts/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - run: pnpm run lint
        working-directory: ./

  #
  # CLIENT test:functional referential-integrity
  #
  client:
    timeout-minutes: 35
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        referentialIntegrity: ['', 'foreignKeys', 'prisma']
        # queryEngine: ['library', 'binary']
        # os: [buildjet-4vcpu-ubuntu-2004]
        os: [ubuntu-latest]
        node: [16]

    steps:
      - uses: actions/checkout@v3

      - name: Set referentialIntegrity custom test env var
        run: |
          echo "RI=${{ matrix.referentialIntegrity }}"
          if [ ! -z "${{ matrix.referentialIntegrity }}" ]; then echo "RI=${{ matrix.referentialIntegrity }}" >> $GITHUB_ENV; fi

      # - name: Set CLI Engine Type
      #   run: |
      #     echo "PRISMA_CLI_QUERY_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      # - name: Set Client Engine Type
      #   run: |
      #     echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - run: docker-compose -f docker/docker-compose.yml up --detach postgres postgres_isolated mysql mysql_isolated mssql mongo cockroachdb

      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7

      - uses: actions/setup-node@v3
        with:
          cache: 'pnpm'
          node-version: ${{ matrix.node }}

      - run: bash .github/workflows/scripts/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: 1 to 1
        run: pnpm run test:functional referential-integrity/tests_1-to-1.ts
        working-directory: packages/client

      - name: 1 to n
        run: pnpm run test:functional referential-integrity/tests_1-to-n.ts
        working-directory: packages/client

      - name: m to n (SQL databases)
        run: pnpm run test:functional referential-integrity/tests_m-to-n.ts
        working-directory: packages/client

      - name: m to n (MongoDB)
        run: pnpm run test:functional referential-integrity/tests_m-to-n-MongoDB.ts
        working-directory: packages/client
